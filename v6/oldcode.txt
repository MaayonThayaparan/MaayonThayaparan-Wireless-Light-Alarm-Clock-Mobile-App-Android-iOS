// App.js file

import React from 'react';
import AlarmClock from './AlarmClock';

const App = () => {
  return (
    <>
      <AlarmClock />
    </>
  );
}

export default App;

//AlarmClock.js file

import React, { useState, useEffect } from "react";
import { View, Text, Button, StyleSheet, ScrollView, Switch, Alert } from "react-native";
import DateTimePicker from "@react-native-community/datetimepicker";
import axios from 'axios';
import 'react-native-get-random-values';
import { v4 as uuidv4 } from 'uuid';

const AlarmClock = () => {
    const [alarmTime, setAlarmTime] = useState(new Date());
    const [showTimePicker, setShowTimePicker] = useState(false);
    const [devices, setDevices] = useState([]);
    const [selectedDevices, setSelectedDevices] = useState(new Map());


    // Shows the time picker modal
    const showTimePickerModal = () => {
        setShowTimePicker(true);
    };

    // Hides the time picker modal
    const hideTimePickerModal = () => {
        setShowTimePicker(false);
    };

    const handleTimeChange = (event, selectedTime) => {
        hideTimePickerModal(); // Call this function to hide the time picker
        if (selectedTime) {
            setAlarmTime(selectedTime);
        }
    };

    const fetchDevices = async () => {
        try {
            const response = await axios.get('https://openapi.api.govee.com/router/api/v1/user/devices', {
                headers: {
                    'Content-Type': 'application/json',
                    'Govee-API-Key': '714cfe09-7dd5-4ba0-aa53-34c921fabb26'
                }
            });
            setDevices(response.data.data);
        } catch (error) {
            Alert.alert('Error fetching devices', error.message);
        }
    };

    const toggleDeviceSelection = (id) => {
        setSelectedDevices(new Map(selectedDevices.set(id, !selectedDevices.get(id))));
    };

    useEffect(() => {
        const checkAlarm = setInterval(() => {
            const currentTime = new Date();
            if (
                currentTime.getHours() === alarmTime.getHours() &&
                currentTime.getMinutes() === alarmTime.getMinutes()
            ) {
                Alert.alert("Alarm", "It is time!");
                handleTriggerDevices();
                clearInterval(checkAlarm);
            }
        }, 1000);
        return () => clearInterval(checkAlarm);
    }, [alarmTime, selectedDevices]);

    const handleTriggerDevices = () => {
        selectedDevices.forEach(async (selected, deviceId) => {
            if (selected) {
                const device = devices.find(d => d.device === deviceId);
                if (!device) return; // Skip if no device data is available
    
                const requestData = {
                    requestId: uuidv4(),  // Generate a unique ID for each request
                    payload: {
                        sku: device.sku,
                        device: deviceId,
                        capability: {
                            type: "devices.capabilities.on_off",
                            instance: "powerSwitch",
                            value: 1  // Set to '1' for 'on', change as needed
                        }
                    }
                };
    
                try {
                    const response = await axios.post('https://openapi.api.govee.com/router/api/v1/device/control', requestData, {
                        headers: {
                            'Content-Type': 'application/json',
                            'Govee-API-Key': '714cfe09-7dd5-4ba0-aa53-34c921fabb26'
                        }
                    });
                    console.log('Device triggered successfully:', deviceId, response.data);
                } catch (error) {
                    console.error('Error triggering device:', deviceId, error.message);
                }
            }
        });
    };

    return (
        <View style={styles.container}>
            <Text style={styles.appName}>AlarmClock</Text>
            <DateTimePicker
                value={alarmTime}
                mode="time"
                is24Hour={true}
                display="spinner"
                onChange={handleTimeChange}
            />
            <Button title="Set Alarm" onPress={() => setShowTimePicker(true)} color="#3498db" />
            <Button title="Get Devices" onPress={fetchDevices} color="#3498db" />
            <ScrollView>
                {devices.map((device) => (
                    <View key={device.device}>
                        <Text>{`${device.sku} (${device.device})`}</Text>
                        <Switch
                            value={!!selectedDevices.get(device.device)}
                            onValueChange={() => toggleDeviceSelection(device.device)}
                        />
                    </View>
                ))}
            </ScrollView>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        backgroundColor: "#ecf0f1",
    },
    appName: {
        fontSize: 28,
        fontWeight: "bold",
        color: "#2c3e50",
        marginBottom: 20,
    },
    clockContainer: {
        flexDirection: "row",
        alignItems: "center",
        marginBottom: 20,
    },
    clockText: {
        fontSize: 50,
        marginRight: 10,
        color: "#2c3e50",
    },
    footerText: {
        marginTop: 20,
        fontSize: 16,
        color: "#7f8c8d",
    },
});

export default AlarmClock;